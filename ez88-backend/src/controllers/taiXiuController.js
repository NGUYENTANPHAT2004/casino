const taiXiuService = require('../services/taiXiuService');
const TaiXiu = require('../model/TaiXiu');
const getLatestTaiXiu = async (req, res) => {
    try {
        const latest = await taiXiuService.getLatestResult();
        res.json(latest);
    } catch (error) {
        res.status(500).json({ message: "L·ªói server", error });
    }
};
const placeBet = async (req, res) => {
    try {
        console.log("üì© Nh·∫≠n c∆∞·ª£c:", req.body);

        const { userId, amount, choice } = req.body;

        if (!userId || !amount || !choice) {
            return res.status(400).json({ message: "Thi·∫øu th√¥ng tin c∆∞·ª£c!" });
        }

        if (!["T√†i", "X·ªâu"].includes(choice)) {
            return res.status(400).json({ message: "L·ª±a ch·ªçn c∆∞·ª£c kh√¥ng h·ª£p l·ªá! (Ch·ªâ nh·∫≠n 'T√†i' ho·∫∑c 'X·ªâu')" });
        }

        // üî• L·∫•y v√≤ng ch∆°i m·ªõi nh·∫•t
        const latestRound = await taiXiuService.getLatestResult();
        if (!latestRound) {
            return res.status(400).json({ message: "Kh√¥ng c√≥ v√≤ng c∆∞·ª£c n√†o ƒëang di·ªÖn ra!" });
        }

        // üî• Ki·ªÉm tra n·∫øu ƒë√£ h·∫øt th·ªùi gian ƒë·∫∑t c∆∞·ª£c (10 gi√¢y cu·ªëi)
        const now = new Date();
        const timeLeft = (latestRound.createdAt.getTime() + 60000) - now.getTime(); // 60s m·ªói v√≤ng
        if (timeLeft <= 10000) {
            return res.status(400).json({ message: "ƒê√£ h·∫øt th·ªùi gian ƒë·∫∑t c∆∞·ª£c! (Ch·ªâ ƒë∆∞·ª£c c∆∞·ª£c trong 50 gi√¢y ƒë·∫ßu ti√™n)" });
        }

        // üî• Th√™m ƒë·∫∑t c∆∞·ª£c v√†o v√≤ng m·ªõi nh·∫•t
        latestRound.bets.push({ user: userId, amount, choice });

        // L∆∞u v√†o MongoDB
        await latestRound.save();

        console.log(`‚úÖ C∆∞·ª£c th√†nh c√¥ng v√†o v√≤ng ${latestRound.round}:`, latestRound.bets);

        res.json({ message: "ƒê·∫∑t c∆∞·ª£c th√†nh c√¥ng!", round: latestRound.round, bets: latestRound.bets });
    } catch (error) {
        console.error("‚ùå L·ªói khi ƒë·∫∑t c∆∞·ª£c:", error);
        res.status(500).json({ message: "L·ªói server", error: error.toString() });
    }
};
const getBetHistory = async (req, res) => {
    try {
        const { userId } = req.params;

        if (!userId) {
            return res.status(400).json({ message: "Thi·∫øu userId!" });
        }

        // üî• L·∫•y t·∫•t c·∫£ v√≤ng ch∆°i m√† ng∆∞·ªùi d√πng n√†y ƒë√£ c∆∞·ª£c
        const betHistory = await TaiXiu.find({ "bets.user": userId })
            .sort({ round: -1 }) // S·∫Øp x·∫øp t·ª´ m·ªõi nh·∫•t ƒë·∫øn c≈© nh·∫•t
            .select("round result bets.createdAt") // Ch·ªâ l·∫•y c√°c th√¥ng tin c·∫ßn thi·∫øt

        if (!betHistory.length) {
            return res.status(404).json({ message: "Ng∆∞·ªùi ch∆°i ch∆∞a c√≥ l·ªãch s·ª≠ c∆∞·ª£c!" });
        }

        res.json({ userId, history: betHistory });
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y l·ªãch s·ª≠ c∆∞·ª£c:", error);
        res.status(500).json({ message: "L·ªói server", error: error.toString() });
    }
};
const getRecentResults = async (req, res) => {
    try {
        // üî• L·∫•y 13 v√≤ng g·∫ßn nh·∫•t, ch·ªâ l·∫•y v√≤ng ƒë√£ c√≥ k·∫øt qu·∫£
        const recentRounds = await TaiXiu.find({ result: { $ne: "ƒêang ch·ªù..." } })
            .sort({ round: -1 }) // S·∫Øp x·∫øp t·ª´ m·ªõi nh·∫•t ƒë·∫øn c≈© nh·∫•t
            .limit(13) // Ch·ªâ l·∫•y 13 v√≤ng g·∫ßn nh·∫•t
            .select("round result createdAt"); // Ch·ªâ l·∫•y c√°c tr∆∞·ªùng c·∫ßn thi·∫øt

        if (!recentRounds.length) {
            return res.status(404).json({ message: "Ch∆∞a c√≥ k·∫øt qu·∫£ v√≤ng n√†o!" });
        }

        res.json({ recentRounds });
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y k·∫øt qu·∫£ 13 v√≤ng g·∫ßn nh·∫•t:", error);
        res.status(500).json({ message: "L·ªói server", error: error.toString() });
    }
};
const getAllResults = async (req, res) => {
    try {
        // üî• L·∫•y t·∫•t c·∫£ v√≤ng ch∆°i c√≥ k·∫øt qu·∫£
        const allRounds = await TaiXiu.find({ result: { $ne: "ƒêang ch·ªù..." } })
            .sort({ round: -1 }) // S·∫Øp x·∫øp t·ª´ m·ªõi nh·∫•t ƒë·∫øn c≈© nh·∫•t
            .select("round result createdAt"); // Ch·ªâ l·∫•y c√°c tr∆∞·ªùng c·∫ßn thi·∫øt

        if (!allRounds.length) {
            return res.status(404).json({ message: "Ch∆∞a c√≥ k·∫øt qu·∫£ v√≤ng n√†o!" });
        }

        res.json({ allRounds });
    } catch (error) {
        console.error("‚ùå L·ªói khi l·∫•y t·∫•t c·∫£ k·∫øt qu·∫£:", error);
        res.status(500).json({ message: "L·ªói server", error: error.toString() });
    }
};

module.exports = { getLatestTaiXiu, placeBet,getBetHistory,getRecentResults,getAllResults };


